#!/usr/bin/env node --harmony-generators

var exists = require('fs').existsSync;
var base = require('path').basename;
var program = require('commander');
var fmt = require('util').format;
var pkg = require('../package');
var join = require('path').join;
var Runner = require('..');
var cwd = process.cwd();
var co = require('co');
var env = process.env;

/**
 * Default browser
 */

var browser = env.BROWSER || 'chrome';

/**
 * Program
 */

program
  .usage('<command> [options]')
  .option('-p, --pathname <path>', 'tests path, defaults to /test', '/test')
  .option('-c, --commands <list>', 'shell commands to run on refresh', list, [])
  .option('-m, --middleware <file>', 'a file that exposes a function that accepts koa app')
  .option('-t, --title <title>', 'set a title to your tests [' + base(cwd) + ']', base(cwd))
  .option('-b, --build <path>', 'set the built file path when using the default.html [/build.js]', '/build.js')
  .option('-R, --reporter <name>', 'mocha reporter [dot]', 'dot')
  .version(pkg.version);

/**
 * Saucelabs
 */

program
  .command('saucelabs')
  .description('run tests using saucelabs')
  .option('-b, --browsers <browsers>', 'browser(s) you want to test on [$BROWSER]', list, [browser])
  .option('-u, --user <user>', 'saucelabs user [$SAUCE_USER]', env.SAUCE_USER)
  .option('-k, --key <key>', 'saucelabs key [$SAUCE_KEY]', env.SAUCE_KEY)
  .action(pass('./saucelabs'));

/**
 * Browser
 */

program
  .command('browser [name]')
  .description('run tests using a browser')
  .action(pass('./browser'));

/**
 * PhantomJS
 */

program
  .command('phantomjs')
  .description('run tests using phantomjs')
  .action(pass('./phantom.js'));

/**
 * Parse
 */

program.parse(process.argv);

/**
 * Middleware
 */

if (program.middleware) {
  var path = join(cwd, program.middleware);
  if (!exists(path)) error('cannot find middleware %s', path);
  var middleware = require(path);
}

/**
 * Lazy load `path` and pass `args`.
 */

function pass(path){
  return co(function*(){
    var args = [].slice.call(arguments);
    var command = args.pop();

    try {
      var cmd = require(path);
      yield cmd(command, runner(), args);
    } catch (e) {
      error(e.stack);
    }
  });
}

/**
 * Create a basic runner.
 */

function runner(){
  var cmds = program.commands.filter(string);
  var mw = middleware || function(){};
  var runner = Runner(cwd);
  cmds.forEach(runner.command.bind(runner));
  mw(runner.app);
  runner.app.path(program.pathname);

  process.on('SIGINT', function(){
    runner.destroy();
    process.exit(0);
  });

  return runner;
}

/**
 * is string.
 */

function string(val){
  return 'string' == typeof val;
}

/**
 * Error
 */

function error(){
  var msg = fmt.apply(null, arguments);
  console.error();
  console.error('  %s', msg);
  console.error();
  process.exit(1);
}

/**
 * List
 */

function list(val){
  if ('"' == val[0]) val = val.slice(1, -1);
  return val.split(/ *, */);
}
