#!/usr/bin/env node

var Saucelabs = require('../lib/saucelabs');
var runner = require('..')(process.cwd());
var Queue = require('queue-component');
var pascal = require('to-pascal-case');
var buffer = require('buffer-events');
var program = require('commander');
var fmt = require('util').format;
var join = require('path').join;
var mocha = require('mocha');
var co = require('co');
var env = process.env;

/**
 * Default browser.
 */

var browser = env.BROWSER || 'chrome';

/**
 * Program
 */

program
  .usage('[path] [options]')
  .option('-b, --browser <browsers>', 'browser(s) you want to test on [$BROWSER]', list, [browser])
  .option('-m, --middleware <file>', 'filename that exposes a function that accepts a koa app')
  .option('-u, --user <user>', 'saucelabs user [$SAUCE_USER]', env.SAUCE_USER)
  .option('-k, --key <key>', 'saucelabs key [$SAUCE_KEY]', env.SAUCE_KEY)
  .option('-n, --name <name>', 'tests name in saucelabs [test]', 'test')
  .option('-c, --concurrency <n>', 'saucelabs concurrency [3]', 3)
  .option('-R, --reporter <name>', 'mocha reporter [dot]', 'dot');

/**
 * Debug mode.
 */

var debug = !! env.DEBUGMODE;

/**
 * Help
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # test in saucelabs');
  console.log('    $ duo test saucelabs /test --browser chrome');
  console.log();
  console.log('    # multiple browsers');
  console.log('    $ duo test saucelabs /test --browser ie6..11,chrome,safari,firefox');
  console.log();
  process.exit(0);
});

/**
 * Parse
 */

program.parse(process.argv);

/**
 * Path
 */

var path = program.args[0] || '/test/';

/**
 * User, key
 */

if (!program.key || !program.user) error('--user and --key are required');

/**
 * Browsers
 */

var browsers = program.browser;
if (!browsers.length) error('--browser missing');

/**
 * Reporter
 */

var reporter = pascal(program.reporter);
var Reporter = mocha.reporters[reporter];
if (!Reporter) error('--reporter %s was not found in mocha.reporters', reporter);

/**
 * Run
 */

var sauce = Saucelabs(runner.app, program.user, program.key);

/**
 * Queue
 */

var queue = new Queue({
  concurrency: 1
});

/**
 * Failures
 */

var failures = 0;

/**
 * Push a client.
 */

sauce.on('browser', function(browser){
  var runner = browser.runner;
  var flush = buffer(browser.runner);

  function start(){
    console.log();
    console.log('  %s', browser);
  }

  function end(done){
    return function(obj){
      failures += obj.failures;
      done();
    };
  }

  queue.push(function(done){
    setImmediate(flush);
    runner.on('end', end(done));
    runner.on('start', start);
    new Reporter(runner);
  });
});

/**
 * Middleware
 */

var mw;

try {
  mw = program.middleware
    ? require(join(process.cwd(), program.middleware))
    : function(){};
} catch (e) {
  error('cannot find middleware %s', join(process.cwd(), program.middleware));
}

/**
 * Start
 */

if (!debug) {
  co(function*(){
    runner.app.path(path);
    mw(runner.app);
    browsers.forEach(sauce.add.bind(sauce));
    yield* sauce.run(program.name);
    process.exit(failures);
  })(error);
  return;
}

/**
 * Start in debug mode.
 */

co(function*(){
  runner.app.path(path);
  mw(runner.app);
  var url = yield sauce.debug();
  console.log();
  console.log('  debug on %s', url);
  console.log();
})(error);

/**
 * List
 */

function list(val){
  if ('"' == val[0]) val = val.slice(1, -1);
  return val.split(/ *, */);
}

/**
 * Error
 */

function error(err){
  if (!err) return;
  var args = [].slice.call(arguments, 1);
  var msg = fmt.apply(null, [(err.stack || err)].concat(args));
  console.error();
  console.error('   %s', msg);
  console.error();
  process.exit(1);
}
